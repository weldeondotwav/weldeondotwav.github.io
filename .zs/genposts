#!/usr/bin/bash

# genposts looks at all the files in the pages/posts/ directory, and shows all the files in a table view with a link to that page's URL
# the "description" field is populated from YAML front-matter field "description" if it exists within the first (reasonable-amount) chars.

# where we should look for files to link
POST_DIR=pages/posts
POST_COUNT=$(ls -1 $POST_DIR | wc -l)

# fallback content
if [[ POST_COUNT -lt 1 ]]; then
  echo "No posts!"
  exit 0
fi

# some stats
echo "<pre> Posts: ""$POST_COUNT"" </pre>"

# helper to extract the "page-description" front-matter tag from the given file - perhaps quite barbaric
function path_get_description() {
  # read the aforementioned "reasonable-amount" of chars and get the data hopefully
  head -c 250 pages/posts/"$1" | grep -e "^page-description:" | cut -d: -f2 | cut -d\" -f2
}

# helper to extract the "page-date" front-matter tag from the given file - perhaps quite barbaric
function path_get_date() {
  # read the aforementioned "reasonable-amount" of chars and get the data hopefully
  head -c 250 pages/posts/"$1" | grep -e "^page-date:" | cut -d: -f2 | cut -d\" -f2
}

# helper to extract the "page-title" front-matter tag from the given file - perhaps quite barbaric
function path_get_title() {
  # read the aforementioned "reasonable-amount" of chars and get the data hopefully
  head -c 250 pages/posts/"$1" | grep -e "^page-title:" | cut -d: -f2 | cut -d\" -f2
}

# helper to build the link and return it as a markdown link (and change the filetype for the rendered output )
function path_to_link() {
  echo "[$(path_get_title "$1")]($(echo /pages/posts/"$1" | sed 's/md/html/'))"
}

# table header - as per markdown
echo "| Post | Description | Date |"
echo "| ---- | ----------- | ---- |"

PAGES=$(ls $POST_DIR)
# for each page ...
for page in $PAGES; do
  echo "| $(path_to_link "$page") | $(path_get_description "$page") | $(path_get_date "$page")|"
done
